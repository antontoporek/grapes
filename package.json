{
  "directories": {
    "test": "test"
  },
  "scripts": {
    "start": "npm run replica && npm run deploy && npm run mint",
    "replica": "dfx stop && rm -rf .dfx && dfx start --clean --background --artificial-delay 100 && dfx canister create staging && dfx canister create ledger && dfx canister create test",
    "deploy": "npm run deploy:ledger && npm run deploy:staging",
    "deploy-test": "npm run reinstall:ledger -- -qq && npm run reinstall:test -- -qq",
    "deploy:staging": "dfx canister create staging && DFX_MOC_PATH=\"$(vessel bin)/moc\" dfx deploy staging --argument \"$(cat initArgs.did)\"",
    "reinstall:staging": "dfx canister create staging && DFX_MOC_PATH=\"$(vessel bin)/moc\" dfx deploy staging --mode reinstall -y --argument \"$(cat initArgs.did)\"",
    "reinstall:test": "dfx canister create test && DFX_MOC_PATH=\"$(vessel bin)/moc\" dfx deploy test --mode reinstall -y --argument \"$(cat test/initArgs.did)\"",
    "upgrade:staging": "dfx canister stop staging && DFX_MOC_PATH=\"$(vessel bin)/moc\" dfx deploy staging --upgrade-unchanged --argument \"$(cat initArgs.did)\" && dfx canister start staging",
    "deploy:ledger": "npm run private-dids && dfx canister create ledger && DFX_MOC_PATH=\"$(vessel bin)/moc\" dfx deploy ledger --argument '(record {minting_account = \"e82226d3101bd8525111e2c6501a79365f2484d82d3f2be96269b78fe200eeaa\"; initial_values = vec { record { \"8b61ff722d7e6321eb99bb607ab0cf323b3c64b43d6a13c245c8a4e197f7b38b\"; record { e8s=1_000_000_000_000_000 } }; }; send_whitelist = vec {}})' && npm run public-dids",
    "reinstall:ledger": "npm run private-dids && dfx canister create ledger && DFX_MOC_PATH=\"$(vessel bin)/moc\" dfx deploy ledger --mode reinstall -y --argument '(record {minting_account = \"e82226d3101bd8525111e2c6501a79365f2484d82d3f2be96269b78fe200eeaa\"; initial_values = vec { record { \"8b61ff722d7e6321eb99bb607ab0cf323b3c64b43d6a13c245c8a4e197f7b38b\"; record { e8s=1_000_000_000_000_000 } }; }; send_whitelist = vec {}})' && npm run public-dids",
    "public-dids": "perl -i -pe 's|declarations/ledger/ledger\\.private\\.did|declarations/ledger/ledger\\.public\\.did|g' dfx.json",
    "private-dids": "perl -i -pe 's|declarations/ledger/ledger\\.public\\.did|declarations/ledger/ledger\\.private\\.did|g' dfx.json",
    "mint": "dfx canister call staging addAsset '(record {name = \"privat\";payload = record {ctype = \"text/html\"; data = vec {blob \"hello world!\"} } })' && dfx canister call staging initMint && dfx canister call staging shuffleTokensForSale && dfx canister call staging enableSale",
    "mint-2": "dfx canister call staging addAsset '(record {name = \"privat0\";payload = record {ctype = \"text/html\"; data = vec {blob \"hello world0!\"} } })' && dfx canister call staging addAsset '(record {name = \"privat1\";payload = record {ctype = \"text/html\"; data = vec {blob \"hello world1!\"} } })' && dfx canister call staging initMint && dfx canister call staging shuffleTokensForSale && dfx canister call staging enableSale",
    "mint:test": "dfx canister call test addAsset '(record {name = \"privat\";payload = record {ctype = \"text/html\"; data = vec {blob \"hello world!\"} } })' && dfx canister call test initMint && dfx canister call test shuffleTokensForSale && dfx canister call test enableSale",
    "mint:test-2": "dfx canister call test addAsset '(record {name = \"privat0\";payload = record {ctype = \"text/html\"; data = vec {blob \"hello world0!\"} } })' && dfx canister call test addAsset '(record {name = \"privat1\";payload = record {ctype = \"text/html\"; data = vec {blob \"hello world1!\"} } })' && dfx canister call test initMint && dfx canister call test shuffleTokensForSale && dfx canister call test enableSale",
    "vitest": "vitest run",
    "vitest:watch": "vitest watch",
    "env": "ts-node ./test/apply-env.ts",
    "test:pending-sale": "npm run env pending-sale && npm run deploy-test && npm run mint:test && vitest run --threads=false pending-sale",
    "test:public-sale": "npm run env public-sale && npm run deploy-test && npm run mint:test && vitest run --threads=false public-sale",
    "test:highload-sale": "npm run env highload-sale && npm run deploy-test && npm run mint:test && vitest run --threads=false highload-sale",
    "test:whitelist-sale": "npm run env whitelist-sale && npm run deploy-test && npm run mint:test && vitest run --threads=false whitelist-sale",
    "test:whitelist-slots": "npm run env whitelist-slots && npm run deploy-test && npm run mint:test && vitest run --threads=false whitelist-slots",
    "test:marketplace": "npm run env marketplace && npm run deploy-test && npm run mint:test && vitest run --threads=false marketplace",
    "test:fees": "npm run env fees && npm run deploy-test && npm run mint:test && vitest run --threads=false fees",
    "test:sold-out": "npm run env sold-out && npm run deploy-test && npm run mint:test && vitest run --threads=false sold-out",
    "test:single-asset": "npm run env single-asset && npm run deploy-test && npm run mint:test && vitest run --threads=false single-asset.test.ts",
    "test:multi-asset": "npm run env multi-asset && npm run deploy-test && npm run mint:test-2 && vitest run --threads=false multi-asset",
    "test:single-asset-delayed-reveal": "npm run env single-asset-delayed-reveal && npm run deploy-test && npm run mint:test-2 && dfx canister call test shuffleTokensForSale && vitest run --threads=false single-asset-delayed-reveal",
    "test:open-edition": "npm run env open-edition && npm run deploy-test && npm run mint:test && vitest run --threads=false open-edition",
    "test:backup": "npm run env backup && npm run deploy-test && npm run mint:test && vitest run --threads=false backup",
    "test:restore": "npm run env restore && npm run deploy-test && vitest run --threads=false restore",
    "test": "npm run test:single-asset && npm run test:multi-asset && npm run test:single-asset-delayed-reveal && npm run test:pending-sale && npm run test:public-sale && npm run test:highload-sale && npm run test:whitelist-sale && npm run test:whitelist-slots && npm run test:marketplace && npm run test:fees && npm run test:sold-out && npm run test:open-edition && npm run test:backup && npm run test:restore",
    "backup": "ts-node ./backup/backup.ts",
    "restore": "ts-node ./backup/restore.ts",
    "test-br": "ts-node ./backup/test.ts"
  },
  "devDependencies": {
    "@dfinity/agent": "^0.15.0",
    "@dfinity/identity": "^0.15.0",
    "@dfinity/identity-secp256k1": "^0.15.4",
    "@dfinity/nns": "^0.10.0",
    "@dfinity/principal": "^0.15.0",
    "@types/node": "^18.15.0",
    "minimist": "^1.2.8",
    "pem-file": "^1.0.1",
    "ts-node": "^10.9.1",
    "typescript": "^4.9.4",
    "vitest": "^0.29.2"
  }
}
