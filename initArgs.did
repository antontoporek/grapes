(
  principal "rrkah-fqaaa-aaaaa-aaaaq-cai",
  record {
    collectionName = "Pineapple Punks";
    collectionSize = 10_000;
    salePrice = 700_000_000; // 7 ICP
    publicSaleStart = 1680696181381000000; // Start of first purchase (WL or other)
    whitelistTime = 1680696181381000000; // Period for WL only discount. Set to publicSaleStart for no exclusive period
    marketDelay = 86400000000000; // How long to delay market opening (2 days after whitelist sale started or when sold out)
    escrowDelay = 120000000000; // 120 seconds
    placeholderContentLength = "1053832";
    salesDistribution = vec {};
    royalties = vec {};
    defaultMarketplaceFee = record { ""; 500 };
    // open edition
    // true - no definite collection size and can be minted in an ongoing effort until 'saleEnd' (need to set collectionSize = 0)
    // false - fixed collection size
    openEdition = false;
    // when the sale ends (set to '0' if openEdition = false)
    saleEnd = 0;
    // true - assets will be revealed after 'revealDelay'
    // false - assets will be revealed immediately and assets shuffling will be disabled
    delayedReveal = true;
    // How long to delay assets shuffling and reveal (starting after 'publicSaleStart')
    revealDelay = 86400000000000; // 86400000000000 == 24 hours
    // true - the entire collection will consists of only one asset, meaning all NFTs look the same
    // false - there are at least two different assets in the collection
    singleAssetCollection = false;
    // dutch auction
    dutchAuctionEnabled = false;
    dutchAuctionFor = variant { "everyone" };
    dutchAuctionStartPrice = 21500000000; // start with 350 icp for dutch auction
    dutchAuctionIntervalPriceDrop = 500000000; // drop 5 icp every interval
    dutchAuctionReservePrice = 500000000; // reserve price is 5 icp
    dutchAuctionInterval = 60000000000; // 1 minute
    // airdrop
    airdropEnabled = false;
    airdrop = vec {};
    // whitelist
    whitelistOneTimeOnly = true; // Whitelist addresses are removed after purchase
    whitelistDiscountLimited = true; // If the whitelist discount is limited to the whitelist period only. If no whitelist period this is ignored
    whitelistTiers = vec {};
    test = false; // must be 'false'
    restoreEnabled = false; // must be 'false' (see backup/README.md for details)
    timersInterval = variant { seconds = 60 };
  }
)